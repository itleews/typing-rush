
AVRASM ver. 2.1.30  C:\Users\이우식\Desktop\project\Debug\List\time-attack-typing.asm Thu Dec 05 19:53:01 2024

C:\Users\이우식\Desktop\project\Debug\List\time-attack-typing.asm(1420): warning: Register r5 already defined by the .DEF directive
C:\Users\이우식\Desktop\project\Debug\List\time-attack-typing.asm(1421): warning: Register r4 already defined by the .DEF directive
C:\Users\이우식\Desktop\project\Debug\List\time-attack-typing.asm(1422): warning: Register r7 already defined by the .DEF directive
C:\Users\이우식\Desktop\project\Debug\List\time-attack-typing.asm(1423): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V4.03 Evaluation
                 ;(C) Copyright 1998-2024 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x68
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x80
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _sec_up=R5
                 	.DEF _sec_low=R4
                 	.DEF _input_index=R7
                 	.DEF _round=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0081 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 01ce 	JMP  _external_int4
00000c 940c 01d9 	JMP  _external_int5
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _key_options:
000046 5341
000047 5744      	.DB  0x41,0x53,0x44,0x57
                 _seg_pat:
000048 063f
000049 4f5b
00004a 6d66
00004b 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00004c 6f7f      	.DB  0x7F,0x6F
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00004d 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00004e 0064
00004f 0001      	.DB  0x64,0x0,0x1,0x0
                 
                 _0x3:
000050 191e
000051 0f14
C:\Users\이우식\Desktop\project\Debug\List\time-attack-typing.asm(1483): warning: .cseg .db misalignment - padding zero byte
000052 000a      	.DB  0x1E,0x19,0x14,0xF,0xA
                 _0x0:
000053 6557
000054 636c
000055 6d6f
000056 2065      	.DB  0x57,0x65,0x6C,0x63,0x6F,0x6D,0x65,0x20
000057 6f74
000058 4720
000059 6d61
00005a 0065      	.DB  0x74,0x6F,0x20,0x47,0x61,0x6D,0x65,0x0
00005b 7453
00005c 7261
00005d 2074
00005e 7250      	.DB  0x53,0x74,0x61,0x72,0x74,0x20,0x50,0x72
00005f 7365
000060 2073
000061 454b
000062 3159      	.DB  0x65,0x73,0x73,0x20,0x4B,0x45,0x59,0x31
000063 5900
000064 756f
000065 5720
000066 6e69      	.DB  0x0,0x59,0x6F,0x75,0x20,0x57,0x69,0x6E
000067 0021
000068 6147
000069 656d
00006a 4f20      	.DB  0x21,0x0,0x47,0x61,0x6D,0x65,0x20,0x4F
00006b 6576
00006c 2172
C:\Users\이우식\Desktop\project\Debug\List\time-attack-typing.asm(1491): warning: .cseg .db misalignment - padding zero byte
00006d 0000      	.DB  0x76,0x65,0x72,0x21,0x0
                 _0x2000060:
C:\Users\이우식\Desktop\project\Debug\List\time-attack-typing.asm(1493): warning: .cseg .db misalignment - padding zero byte
00006e 0001      	.DB  0x1
                 _0x2000000:
00006f 4e2d
000070 4e41
000071 4900
000072 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\이우식\Desktop\project\Debug\List\time-attack-typing.asm(1496): warning: .cseg .db misalignment - padding zero byte
000073 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000074 0001      	.DW  0x01
000075 0002      	.DW  0x02
000076 009a      	.DW  __REG_BIT_VARS*2
                 
000077 0004      	.DW  0x04
000078 0004      	.DW  0x04
000079 009c      	.DW  __REG_VARS*2
                 
00007a 0005      	.DW  0x05
00007b 0500      	.DW  _time_limits
00007c 00a0      	.DW  _0x3*2
                 
00007d 0001      	.DW  0x01
00007e 050f      	.DW  __seed_G100
00007f 00dc      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
000080 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000081 94f8      	CLI
                 
000082 27ee      	CLR  R30
000083 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000084 e0f1      	LDI  R31,1
000085 bff5      	OUT  MCUCR,R31
000086 bfe5      	OUT  MCUCR,R30
000087 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000089 e08d      	LDI  R24,(14-2)+1
00008a e0a2      	LDI  R26,2
00008b 27bb      	CLR  R27
                 __CLEAR_REG:
00008c 93ed      	ST   X+,R30
00008d 958a      	DEC  R24
00008e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00008f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000090 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000091 e0a0      	LDI  R26,LOW(__SRAM_START)
000092 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000093 93ed      	ST   X+,R30
000094 9701      	SBIW R24,1
000095 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000096 eee8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000097 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000098 9185      	LPM  R24,Z+
000099 9195      	LPM  R25,Z+
00009a 9700      	SBIW R24,0
00009b f061      	BREQ __GLOBAL_INI_END
00009c 91a5      	LPM  R26,Z+
00009d 91b5      	LPM  R27,Z+
00009e 9005      	LPM  R0,Z+
00009f 9015      	LPM  R1,Z+
0000a0 01bf      	MOVW R22,R30
0000a1 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000a2 9005      	LPM  R0,Z+
0000a3 920d      	ST   X+,R0
0000a4 9701      	SBIW R24,1
0000a5 f7e1      	BRNE __GLOBAL_INI_LOOP
0000a6 01fb      	MOVW R30,R22
0000a7 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000a8 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000a9 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000aa bfed      	OUT  SPL,R30
0000ab e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000ac bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000ad e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000ae e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000af 940c 00b1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 
                 	.DSEG
                 ;void Time_out(void);
                 ;void LCD_init(void);
                 ;void LCD_String(char flash*);
                 ;void Busy(void);
                 ;void Command(lcd_char);
                 ;void Data(lcd_char);
                 ;void GenerateRandomKeys(void);
                 ;void DisplayPattern(void);
                 ;void CheckUserInput(char);
                 ;void NextRound(void);
                 ;void GameOver(void);
                 ;void ResetGame(void);
                 ;void USART_Init(unsigned int);
                 ;char USART_Receive(void);
                 ;void USART_Transmit(char);
                 ;void main(void) {
                 ; 0000 002F void main(void) {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0030 DDRB = 0xF0;
0000b1 efe0      	LDI  R30,LOW(240)
0000b2 bbe7      	OUT  0x17,R30
                 ; 0000 0031 DDRD = 0xF0;
0000b3 bbe1      	OUT  0x11,R30
                 ; 0000 0032 DDRG = 0x0F;
0000b4 e0ef      	LDI  R30,LOW(15)
0000b5 93e0 0064 	STS  100,R30
                 ; 0000 0033 
                 ; 0000 0034 EIMSK = 0b00110000;
0000b7 e3e0      	LDI  R30,LOW(48)
0000b8 bfe9      	OUT  0x39,R30
                 ; 0000 0035 EICRB = 0b00001000;
0000b9 e0e8      	LDI  R30,LOW(8)
0000ba bfea      	OUT  0x3A,R30
                 ; 0000 0036 SREG = 0x80;
0000bb e8e0      	LDI  R30,LOW(128)
0000bc bfef      	OUT  0x3F,R30
                 ; 0000 0037 
                 ; 0000 0038 LCD_init();
0000bd d0cb      	RCALL _LCD_init
                 ; 0000 0039 LCD_String("Welcome to Game");
                +
0000be eaa6     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000bf e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000c0 d0da      	RCALL _LCD_String
                 ; 0000 003A Command(LINE2);
0000c1 eca0      	LDI  R26,LOW(192)
0000c2 d142      	RCALL SUBOPT_0x0
                 ; 0000 003B LCD_String("Start Press KEY1");
                 ; 0000 003C 
                 ; 0000 003D USART_Init(103);  // 9600bps
0000c3 e6a7      	LDI  R26,LOW(103)
0000c4 e0b0      	LDI  R27,0
0000c5 d01d      	RCALL _USART_Init
                 ; 0000 003E 
                 ; 0000 003F while (1) {
                 _0x4:
                 ; 0000 0040 if (timer_running) {
0000c6 fe20      	SBRS R2,0
0000c7 c019      	RJMP _0x7
                 ; 0000 0041 Time_out();
0000c8 d0a3      	RCALL _Time_out
                 ; 0000 0042 
                 ; 0000 0043 // USART 입력 처리
                 ; 0000 0044 if (game_running && (UCSR0A & (1 << RXC0))) {
0000c9 fe21      	SBRS R2,1
0000ca c002      	RJMP _0x9
0000cb 995f      	SBIC 0xB,7
0000cc c001      	RJMP _0xA
                 _0x9:
0000cd c008      	RJMP _0x8
                 _0xA:
                 ; 0000 0045 char received_char = USART_Receive();
                 ; 0000 0046 CheckUserInput(received_char);
0000ce 9721      	SBIW R28,1
                 ;	received_char -> Y+0
0000cf d025      	RCALL _USART_Receive
0000d0 83e8      	ST   Y,R30
0000d1 81a8      	LD   R26,Y
0000d2 d057      	RCALL _CheckUserInput
                 ; 0000 0047 USART_Transmit(received_char);
0000d3 81a8      	LD   R26,Y
0000d4 d01a      	RCALL _USART_Transmit
                 ; 0000 0048 }
0000d5 9621      	ADIW R28,1
                 ; 0000 0049 
                 ; 0000 004A // 제한 시간 감소
                 ; 0000 004B sec_low -= 1;
                 _0x8:
0000d6 944a      	DEC  R4
                 ; 0000 004C if (sec_low == 0) {
0000d7 2044      	TST  R4
0000d8 f441      	BRNE _0xB
                 ; 0000 004D sec_low = 100;
0000d9 e6e4      	LDI  R30,LOW(100)
0000da 2e4e      	MOV  R4,R30
                 ; 0000 004E if (sec_up > 0) {
0000db e0e0      	LDI  R30,LOW(0)
0000dc 15e5      	CP   R30,R5
0000dd f410      	BRSH _0xC
                 ; 0000 004F sec_up -= 1;
0000de 945a      	DEC  R5
                 ; 0000 0050 }
                 ; 0000 0051 else {
0000df c001      	RJMP _0xD
                 _0xC:
                 ; 0000 0052 GameOver();  // 시간 초과 시 게임 종료
0000e0 d077      	RCALL _GameOver
                 ; 0000 0053 }
                 _0xD:
                 ; 0000 0054 }
                 ; 0000 0055 }
                 _0xB:
                 ; 0000 0056 }
                 _0x7:
0000e1 cfe4      	RJMP _0x4
                 ; 0000 0057 }
                 _0xE:
0000e2 cfff      	RJMP _0xE
                 ; .FEND
                 ;void USART_Init(unsigned int ubrr) {
                 ; 0000 005A void USART_Init(unsigned int ubrr) {
                 _USART_Init:
                 ; .FSTART _USART_Init
                 ; 0000 005B UBRR0H = (unsigned char)(ubrr >> 8);
0000e3 931a      	ST   -Y,R17
0000e4 930a      	ST   -Y,R16
0000e5 018d      	MOVW R16,R26
                 ;	ubrr -> R16,R17
0000e6 9310 0090 	STS  144,R17
                 ; 0000 005C UBRR0L = (unsigned char)ubrr;
0000e8 b909      	OUT  0x9,R16
                 ; 0000 005D UCSR0B = (1 << RXEN0) | (1 << TXEN0);
0000e9 e1e8      	LDI  R30,LOW(24)
0000ea b9ea      	OUT  0xA,R30
                 ; 0000 005E UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
0000eb e0e6      	LDI  R30,LOW(6)
0000ec 93e0 0095 	STS  149,R30
                 ; 0000 005F }
0000ee c0b9      	RJMP _0x2080003
                 ; .FEND
                 ;void USART_Transmit(char data) {
                 ; 0000 0061 void USART_Transmit(char data) {
                 _USART_Transmit:
                 ; .FSTART _USART_Transmit
                 ; 0000 0062 while (!(UCSR0A & (1 << UDRE0)));
0000ef 931a      	ST   -Y,R17
0000f0 2f1a      	MOV  R17,R26
                 ;	data -> R17
                 _0xF:
0000f1 9b5d      	SBIS 0xB,5
0000f2 cffe      	RJMP _0xF
                 ; 0000 0063 UDR0 = data;
0000f3 b91c      	OUT  0xC,R17
                 ; 0000 0064 }
0000f4 c0d3      	RJMP _0x2080002
                 ; .FEND
                 ;char USART_Receive(void) {
                 ; 0000 0066 char USART_Receive(void) {
                 _USART_Receive:
                 ; .FSTART _USART_Receive
                 ; 0000 0067 while (!(UCSR0A & (1 << RXC0)));
                 _0x12:
0000f5 9b5f      	SBIS 0xB,7
0000f6 cffe      	RJMP _0x12
                 ; 0000 0068 return UDR0;
0000f7 b1ec      	IN   R30,0xC
0000f8 9508      	RET
                 ; 0000 0069 }
                 ; .FEND
                 ;void GenerateRandomKeys(void) {
                 ; 0000 006C void GenerateRandomKeys(void) {
                 _GenerateRandomKeys:
                 ; .FSTART _GenerateRandomKeys
                 ; 0000 006D int i;  // i를 int로 선언
                 ; 0000 006E for (i = 0; i < 5; i++) {
0000f9 931a      	ST   -Y,R17
0000fa 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
0000fb e000     +LDI R16 , LOW ( 0 )
0000fc e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x16:
                +
0000fd 3005     +CPI R16 , LOW ( 5 )
0000fe e0e0     +LDI R30 , HIGH ( 5 )
0000ff 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000100 f494      	BRGE _0x17
                 ; 0000 006F random_keys[i] = key_options[rand() % 4];  // rand() 사용
000101 01f8      	MOVW R30,R16
000102 5feb      	SUBI R30,LOW(-_random_keys)
000103 4ffa      	SBCI R31,HIGH(-_random_keys)
000104 93ff      	PUSH R31
000105 93ef      	PUSH R30
000106 d0e2      	RCALL _rand
000107 e0a3      	LDI  R26,LOW(3)
000108 e0b0      	LDI  R27,HIGH(3)
000109 d1a9      	RCALL __MANDW12
00010a 57e4      	SUBI R30,LOW(-_key_options*2)
00010b 4fff      	SBCI R31,HIGH(-_key_options*2)
00010c 91e4      	LPM  R30,Z
00010d 91af      	POP  R26
00010e 91bf      	POP  R27
00010f 93ec      	ST   X,R30
                 ; 0000 0070 }
                +
000110 5f0f     +SUBI R16 , LOW ( - 1 )
000111 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000112 cfea      	RJMP _0x16
                 _0x17:
                 ; 0000 0071 }
000113 c094      	RJMP _0x2080003
                 ; .FEND
                 ;void DisplayPattern(void) {
                 ; 0000 0074 void DisplayPattern(void) {
                 _DisplayPattern:
                 ; .FSTART _DisplayPattern
                 ; 0000 0075 int i;  // 변수 선언을 for문 밖에서 먼저 선언
                 ; 0000 0076 Command(ALLCLR);
000114 931a      	ST   -Y,R17
000115 930a      	ST   -Y,R16
                 ;	i -> R16,R17
000116 e0a1      	LDI  R26,LOW(1)
000117 d093      	RCALL _Command
                 ; 0000 0077 Command(LINE2);
000118 eca0      	LDI  R26,LOW(192)
000119 d091      	RCALL _Command
                 ; 0000 0078 
                 ; 0000 0079 for (i = 0; i < 5; i++) {
                +
00011a e000     +LDI R16 , LOW ( 0 )
00011b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x19:
                +
00011c 3005     +CPI R16 , LOW ( 5 )
00011d e0e0     +LDI R30 , HIGH ( 5 )
00011e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
00011f f44c      	BRGE _0x1A
                 ; 0000 007A Data(random_keys[i]);  // random_keys 배열의 각 문자 출력
000120 e0a5      	LDI  R26,LOW(_random_keys)
000121 e0b5      	LDI  R27,HIGH(_random_keys)
000122 0fa0      	ADD  R26,R16
000123 1fb1      	ADC  R27,R17
000124 91ac      	LD   R26,X
000125 d08c      	RCALL _Data
                 ; 0000 007B }
                +
000126 5f0f     +SUBI R16 , LOW ( - 1 )
000127 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000128 cff3      	RJMP _0x19
                 _0x1A:
                 ; 0000 007C }
000129 c07e      	RJMP _0x2080003
                 ; .FEND
                 ;void CheckUserInput(char received_char) {
                 ; 0000 007F void CheckUserInput(char received_char) {
                 _CheckUserInput:
                 ; .FSTART _CheckUserInput
                 ; 0000 0080 user_input[input_index] = received_char;
00012a 931a      	ST   -Y,R17
00012b 2f1a      	MOV  R17,R26
                 ;	received_char -> R17
00012c d0dc      	RCALL SUBOPT_0x1
00012d 8310      	ST   Z,R17
                 ; 0000 0081 
                 ; 0000 0082 if (user_input[input_index] == random_keys[input_index]) {
00012e d0da      	RCALL SUBOPT_0x1
00012f 81a0      	LD   R26,Z
000130 2de7      	MOV  R30,R7
000131 e0f0      	LDI  R31,0
000132 5feb      	SUBI R30,LOW(-_random_keys)
000133 4ffa      	SBCI R31,HIGH(-_random_keys)
000134 81e0      	LD   R30,Z
000135 17ea      	CP   R30,R26
000136 f431      	BRNE _0x1B
                 ; 0000 0083 input_index++;
000137 9473      	INC  R7
                 ; 0000 0084 if (input_index == 5) {
000138 e0e5      	LDI  R30,LOW(5)
000139 15e7      	CP   R30,R7
00013a f409      	BRNE _0x1C
                 ; 0000 0085 NextRound();  // 성공 시 다음 라운드로
00013b d003      	RCALL _NextRound
                 ; 0000 0086 }
                 ; 0000 0087 }
                 _0x1C:
                 ; 0000 0088 else {
00013c c001      	RJMP _0x1D
                 _0x1B:
                 ; 0000 0089 GameOver();  // 실패 시 게임 종료
00013d d01a      	RCALL _GameOver
                 ; 0000 008A }
                 _0x1D:
                 ; 0000 008B }
00013e c089      	RJMP _0x2080002
                 ; .FEND
                 ;void NextRound(void) {
                 ; 0000 008E void NextRound(void) {
                 _NextRound:
                 ; .FSTART _NextRound
                 ; 0000 008F round++;
00013f 9463      	INC  R6
                 ; 0000 0090 if (round > 5) {  // 5라운드 클리어
000140 e0e5      	LDI  R30,LOW(5)
000141 15e6      	CP   R30,R6
000142 f448      	BRSH _0x1E
                 ; 0000 0091 Command(ALLCLR);
000143 e0a1      	LDI  R26,LOW(1)
000144 d066      	RCALL _Command
                 ; 0000 0092 LCD_String("You Win!");
                +
000145 eca7     +LDI R26 , LOW ( 2 * _0x0 + ( 33 ) )
000146 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 33 ) )
                 	__POINTW2FN _0x0,33
000147 d053      	RCALL _LCD_String
                 ; 0000 0093 timer_running = 0;
000148 94e8      	CLT
000149 f820      	BLD  R2,0
                 ; 0000 0094 game_running = 0;
00014a f821      	BLD  R2,1
                 ; 0000 0095 }
                 ; 0000 0096 else {
00014b c00b      	RJMP _0x1F
                 _0x1E:
                 ; 0000 0097 sec_up = time_limits[round - 1];
00014c 2de6      	MOV  R30,R6
00014d e0f0      	LDI  R31,0
00014e 9731      	SBIW R30,1
00014f 50e0      	SUBI R30,LOW(-_time_limits)
000150 4ffb      	SBCI R31,HIGH(-_time_limits)
000151 8050      	LD   R5,Z
                 ; 0000 0098 sec_low = 100;
000152 e6e4      	LDI  R30,LOW(100)
000153 2e4e      	MOV  R4,R30
                 ; 0000 0099 input_index = 0;
000154 2477      	CLR  R7
                 ; 0000 009A GenerateRandomKeys();
000155 dfa3      	RCALL _GenerateRandomKeys
                 ; 0000 009B DisplayPattern();
000156 dfbd      	RCALL _DisplayPattern
                 ; 0000 009C }
                 _0x1F:
                 ; 0000 009D }
000157 9508      	RET
                 ; .FEND
                 ;void GameOver(void) {
                 ; 0000 00A0 void GameOver(void) {
                 _GameOver:
                 ; .FSTART _GameOver
                 ; 0000 00A1 Command(ALLCLR);
000158 e0a1      	LDI  R26,LOW(1)
000159 d051      	RCALL _Command
                 ; 0000 00A2 LCD_String("Game Over!");
                +
00015a eda0     +LDI R26 , LOW ( 2 * _0x0 + ( 42 ) )
00015b e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 42 ) )
                 	__POINTW2FN _0x0,42
00015c d03e      	RCALL _LCD_String
                 ; 0000 00A3 delay_ms(2000);
00015d eda0      	LDI  R26,LOW(2000)
00015e e0b7      	LDI  R27,HIGH(2000)
00015f d16b      	RCALL _delay_ms
                 ; 0000 00A4 ResetGame();
000160 d001      	RCALL _ResetGame
                 ; 0000 00A5 }
000161 9508      	RET
                 ; .FEND
                 ;void ResetGame(void) {
                 ; 0000 00A8 void ResetGame(void) {
                 _ResetGame:
                 ; .FSTART _ResetGame
                 ; 0000 00A9 round = 1;
000162 e0e1      	LDI  R30,LOW(1)
000163 2e6e      	MOV  R6,R30
                 ; 0000 00AA sec_up = time_limits[0];
000164 d0a9      	RCALL SUBOPT_0x2
                 ; 0000 00AB sec_low = 100;
                 ; 0000 00AC input_index = 0;
000165 2477      	CLR  R7
                 ; 0000 00AD game_running = 0;
000166 94e8      	CLT
000167 f821      	BLD  R2,1
                 ; 0000 00AE timer_running = 0;
000168 f820      	BLD  R2,0
                 ; 0000 00AF 
                 ; 0000 00B0 Command(ALLCLR);
000169 e0a1      	LDI  R26,LOW(1)
00016a d09a      	RCALL SUBOPT_0x0
                 ; 0000 00B1 LCD_String("Start Press KEY1");
                 ; 0000 00B2 }
00016b 9508      	RET
                 ; .FEND
                 ;void Time_out(void) {
                 ; 0000 00B5 void Time_out(void) {
                 _Time_out:
                 ; .FSTART _Time_out
                 ; 0000 00B6 PORTG = 0b00001000;
00016c e0e8      	LDI  R30,LOW(8)
00016d 93e0 0065 	STS  101,R30
                 ; 0000 00B7 PORTD = ((seg_pat[sec_low % 10] & 0x0F) << 4) | (PORTD & 0x0F);
00016f d0a3      	RCALL SUBOPT_0x3
000170 d0ab      	RCALL SUBOPT_0x4
                 ; 0000 00B8 PORTB = (seg_pat[sec_low % 10] & 0x70) | (PORTB & 0x0F);
000171 d0a1      	RCALL SUBOPT_0x3
000172 d0b2      	RCALL SUBOPT_0x5
                 ; 0000 00B9 delay_us(2500);
                 ; 0000 00BA PORTG = 0b00000100;
000173 e0e4      	LDI  R30,LOW(4)
000174 93e0 0065 	STS  101,R30
                 ; 0000 00BB PORTD = ((seg_pat[sec_low / 10] & 0x0F) << 4) | (PORTD & 0x0F);
000176 d0b9      	RCALL SUBOPT_0x6
000177 d0a4      	RCALL SUBOPT_0x4
                 ; 0000 00BC PORTB = (seg_pat[sec_low / 10] & 0x70) | (PORTB & 0x0F);
000178 d0b7      	RCALL SUBOPT_0x6
000179 d0ab      	RCALL SUBOPT_0x5
                 ; 0000 00BD delay_us(2500);
                 ; 0000 00BE PORTG = 0b00000010;
00017a e0e2      	LDI  R30,LOW(2)
00017b 93e0 0065 	STS  101,R30
                 ; 0000 00BF PORTD = ((seg_pat[sec_up % 10] & 0x0F) << 4) | (PORTD & 0x0F);
00017d d0bb      	RCALL SUBOPT_0x7
00017e d09d      	RCALL SUBOPT_0x4
                 ; 0000 00C0 PORTB = (seg_pat[sec_up % 10] & 0x70) | (PORTB & 0x0F);
00017f d0b9      	RCALL SUBOPT_0x7
000180 d0a4      	RCALL SUBOPT_0x5
                 ; 0000 00C1 delay_us(2500);
                 ; 0000 00C2 PORTG = 0b00000001;
000181 e0e1      	LDI  R30,LOW(1)
000182 93e0 0065 	STS  101,R30
                 ; 0000 00C3 PORTD = ((seg_pat[sec_up / 10] & 0x0F) << 4) | (PORTD & 0x0F);
000184 d0bd      	RCALL SUBOPT_0x8
000185 d096      	RCALL SUBOPT_0x4
                 ; 0000 00C4 PORTB = (seg_pat[sec_up / 10] & 0x70) | (PORTB & 0x0F);
000186 d0bb      	RCALL SUBOPT_0x8
000187 d09d      	RCALL SUBOPT_0x5
                 ; 0000 00C5 delay_us(2500);
                 ; 0000 00C6 }
000188 9508      	RET
                 ; .FEND
                 ;void LCD_init(void) {
                 ; 0000 00C9 void LCD_init(void) {
                 _LCD_init:
                 ; .FSTART _LCD_init
                 ; 0000 00CA DDRA = 0xFF;
000189 efef      	LDI  R30,LOW(255)
00018a bbea      	OUT  0x1A,R30
                 ; 0000 00CB PORTA = 0x00;
00018b e0e0      	LDI  R30,LOW(0)
00018c bbeb      	OUT  0x1B,R30
                 ; 0000 00CC Command(0x20);
00018d e2a0      	LDI  R26,LOW(32)
00018e d01c      	RCALL _Command
                 ; 0000 00CD delay_ms(15);
00018f e0af      	LDI  R26,LOW(15)
000190 e0b0      	LDI  R27,0
000191 d139      	RCALL _delay_ms
                 ; 0000 00CE Command(FUNCSET);
000192 e2a8      	LDI  R26,LOW(40)
000193 d017      	RCALL _Command
                 ; 0000 00CF Command(DISPON);
000194 e0ac      	LDI  R26,LOW(12)
000195 d015      	RCALL _Command
                 ; 0000 00D0 Command(ALLCLR);
000196 e0a1      	LDI  R26,LOW(1)
000197 d013      	RCALL _Command
                 ; 0000 00D1 Command(ENTMODE);
000198 e0a6      	LDI  R26,LOW(6)
000199 d011      	RCALL _Command
                 ; 0000 00D2 }
00019a 9508      	RET
                 ; .FEND
                 ;void LCD_String(char flash* str) {
                 ; 0000 00D4 void LCD_String(char flash* str) {
                 _LCD_String:
                 ; .FSTART _LCD_String
                 ; 0000 00D5 while (*str) Data(*str++);
00019b 931a      	ST   -Y,R17
00019c 930a      	ST   -Y,R16
00019d 018d      	MOVW R16,R26
                 ;	*str -> R16,R17
                 _0x20:
00019e 01f8      	MOVW R30,R16
00019f 91e4      	LPM  R30,Z
0001a0 30e0      	CPI  R30,0
0001a1 f031      	BREQ _0x22
0001a2 01f8      	MOVW R30,R16
                +
0001a3 5f0f     +SUBI R16 , LOW ( - 1 )
0001a4 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001a5 91a4      	LPM  R26,Z
0001a6 d00b      	RCALL _Data
0001a7 cff6      	RJMP _0x20
                 _0x22:
                 ; 0000 00D6 }
                 _0x2080003:
0001a8 9109      	LD   R16,Y+
0001a9 9119      	LD   R17,Y+
0001aa 9508      	RET
                 ; .FEND
                 ;void Command(lcd_char byte) {
                 ; 0000 00D8 void Command(lcd_char byte) {
                 _Command:
                 ; .FSTART _Command
                 ; 0000 00D9 Busy();
0001ab 931a      	ST   -Y,R17
0001ac 2f1a      	MOV  R17,R26
                 ;	byte -> R17
0001ad d01c      	RCALL _Busy
                 ; 0000 00DA PORTA = 0x00;
0001ae e0e0      	LDI  R30,LOW(0)
0001af d09b      	RCALL SUBOPT_0x9
                 ; 0000 00DB PORTA |= (byte & 0xF0);
                 ; 0000 00DC delay_us(1);
                 ; 0000 00DD ENABLE = 1;
                 ; 0000 00DE delay_us(1);
                 ; 0000 00DF ENABLE = 0;
                 ; 0000 00E0 
                 ; 0000 00E1 PORTA = 0x00;
0001b0 e0e0      	LDI  R30,LOW(0)
0001b1 c006      	RJMP _0x2080001
                 ; 0000 00E2 PORTA |= (byte << 4);
                 ; 0000 00E3 delay_us(1);
                 ; 0000 00E4 ENABLE = 1;
                 ; 0000 00E5 delay_us(1);
                 ; 0000 00E6 ENABLE = 0;
                 ; 0000 00E7 }
                 ; .FEND
                 ;void Data(lcd_char byte) {
                 ; 0000 00E9 void Data(lcd_char byte) {
                 _Data:
                 ; .FSTART _Data
                 ; 0000 00EA Busy();
0001b2 931a      	ST   -Y,R17
0001b3 2f1a      	MOV  R17,R26
                 ;	byte -> R17
0001b4 d015      	RCALL _Busy
                 ; 0000 00EB PORTA = 0x01;
0001b5 e0e1      	LDI  R30,LOW(1)
0001b6 d094      	RCALL SUBOPT_0x9
                 ; 0000 00EC PORTA |= (byte & 0xF0);
                 ; 0000 00ED delay_us(1);
                 ; 0000 00EE ENABLE = 1;
                 ; 0000 00EF delay_us(1);
                 ; 0000 00F0 ENABLE = 0;
                 ; 0000 00F1 
                 ; 0000 00F2 PORTA = 0x01;
0001b7 e0e1      	LDI  R30,LOW(1)
                 _0x2080001:
0001b8 bbeb      	OUT  0x1B,R30
                 ; 0000 00F3 PORTA |= (byte << 4);
0001b9 b3eb      	IN   R30,0x1B
0001ba 2fae      	MOV  R26,R30
0001bb 2fe1      	MOV  R30,R17
0001bc 95e2      	SWAP R30
0001bd 7fe0      	ANDI R30,0xF0
0001be 2bea      	OR   R30,R26
0001bf bbeb      	OUT  0x1B,R30
                 ; 0000 00F4 delay_us(1);
                +
0001c0 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0001c1 958a     +DEC R24
0001c2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
                 ; 0000 00F5 ENABLE = 1;
0001c3 9ada      	SBI  0x1B,2
                 ; 0000 00F6 delay_us(1);
                +
0001c4 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0001c5 958a     +DEC R24
0001c6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
                 ; 0000 00F7 ENABLE = 0;
0001c7 98da      	CBI  0x1B,2
                 ; 0000 00F8 }
                 _0x2080002:
0001c8 9119      	LD   R17,Y+
0001c9 9508      	RET
                 ; .FEND
                 ;void Busy(void) {
                 ; 0000 00FA void Busy(void) {
                 _Busy:
                 ; .FSTART _Busy
                 ; 0000 00FB delay_ms(2);
0001ca e0a2      	LDI  R26,LOW(2)
0001cb e0b0      	LDI  R27,0
0001cc d0fe      	RCALL _delay_ms
                 ; 0000 00FC }
0001cd 9508      	RET
                 ; .FEND
                 ;interrupt[6] void external_int4(void) {
                 ; 0000 00FF interrupt[6] void external_int4(void) {
                 _external_int4:
                 ; .FSTART _external_int4
0001ce d08c      	RCALL SUBOPT_0xA
                 ; 0000 0100 if (!game_running) {
0001cf fc21      	SBRC R2,1
0001d0 c007      	RJMP _0x33
                 ; 0000 0101 timer_running = 1;
0001d1 9468      	SET
0001d2 f820      	BLD  R2,0
                 ; 0000 0102 sec_up = time_limits[0];
0001d3 d03a      	RCALL SUBOPT_0x2
                 ; 0000 0103 sec_low = 100;
                 ; 0000 0104 GenerateRandomKeys();
0001d4 df24      	RCALL _GenerateRandomKeys
                 ; 0000 0105 DisplayPattern();
0001d5 df3e      	RCALL _DisplayPattern
                 ; 0000 0106 game_running = 1;
0001d6 9468      	SET
0001d7 f821      	BLD  R2,1
                 ; 0000 0107 }
                 ; 0000 0108 }
                 _0x33:
0001d8 c002      	RJMP _0x34
                 ; .FEND
                 ;interrupt[7] void external_int5(void) {
                 ; 0000 010B interrupt[7] void external_int5(void) {
                 _external_int5:
                 ; .FSTART _external_int5
0001d9 d081      	RCALL SUBOPT_0xA
                 ; 0000 010C ResetGame();  // 게임 리셋
0001da df87      	RCALL _ResetGame
                 ; 0000 010D }
                 _0x34:
0001db 91e9      	LD   R30,Y+
0001dc bfef      	OUT  SREG,R30
0001dd 91f9      	LD   R31,Y+
0001de 91e9      	LD   R30,Y+
0001df 91b9      	LD   R27,Y+
0001e0 91a9      	LD   R26,Y+
0001e1 9199      	LD   R25,Y+
0001e2 9189      	LD   R24,Y+
0001e3 9179      	LD   R23,Y+
0001e4 9169      	LD   R22,Y+
0001e5 90f9      	LD   R15,Y+
0001e6 9019      	LD   R1,Y+
0001e7 9009      	LD   R0,Y+
0001e8 9518      	RETI
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 _rand:
                 ; .FSTART _rand
0001e9 91e0 050f 	LDS  R30,__seed_G100
0001eb 91f0 0510 	LDS  R31,__seed_G100+1
0001ed 9160 0511 	LDS  R22,__seed_G100+2
0001ef 9170 0512 	LDS  R23,__seed_G100+3
                +
0001f1 e6ad     +LDI R26 , LOW ( 0x41C64E6D )
0001f2 e4be     +LDI R27 , HIGH ( 0x41C64E6D )
0001f3 ec86     +LDI R24 , BYTE3 ( 0x41C64E6D )
0001f4 e491     +LDI R25 , BYTE4 ( 0x41C64E6D )
                 	__GETD2N 0x41C64E6D
0001f5 d077      	RCALL __MULD12U
                +
0001f6 59ee     +SUBI R30 , LOW ( - 30562 )
0001f7 48f8     +SBCI R31 , HIGH ( - 30562 )
0001f8 4f6f     +SBCI R22 , BYTE3 ( - 30562 )
0001f9 4f7f     +SBCI R23 , BYTE4 ( - 30562 )
                 	__ADDD1N 30562
0001fa 93e0 050f 	STS  __seed_G100,R30
0001fc 93f0 0510 	STS  __seed_G100+1,R31
0001fe 9360 0511 	STS  __seed_G100+2,R22
000200 9370 0512 	STS  __seed_G100+3,R23
000202 01fb      	movw r30,r22
000203 77ff      	andi r31,0x7F
000204 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _time_limits:
000500           	.BYTE 0x5
                 _random_keys:
000505           	.BYTE 0x5
                 _user_input:
00050a           	.BYTE 0x5
                 __seed_G100:
00050f           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000205 dfa5      	RCALL _Command
                +
000206 eba6     +LDI R26 , LOW ( 2 * _0x0 + ( 16 ) )
000207 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 16 ) )
                 	__POINTW2FN _0x0,16
000208 cf92      	RJMP _LCD_String
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000209 2de7      	MOV  R30,R7
00020a e0f0      	LDI  R31,0
00020b 5fe6      	SUBI R30,LOW(-_user_input)
00020c 4ffa      	SBCI R31,HIGH(-_user_input)
00020d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00020e 9050 0500 	LDS  R5,_time_limits
000210 e6e4      	LDI  R30,LOW(100)
000211 2e4e      	MOV  R4,R30
000212 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000213 2da4      	MOV  R26,R4
000214 27bb      	CLR  R27
000215 e0ea      	LDI  R30,LOW(10)
000216 e0f0      	LDI  R31,HIGH(10)
000217 d08d      	RCALL __MODW21
000218 57e0      	SUBI R30,LOW(-_seg_pat*2)
000219 4fff      	SBCI R31,HIGH(-_seg_pat*2)
00021a 91e4      	LPM  R30,Z
00021b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x4:
00021c 70ef      	ANDI R30,LOW(0xF)
00021d 95e2      	SWAP R30
00021e 7fe0      	ANDI R30,0xF0
00021f 2fae      	MOV  R26,R30
000220 b3e2      	IN   R30,0x12
000221 70ef      	ANDI R30,LOW(0xF)
000222 2bea      	OR   R30,R26
000223 bbe2      	OUT  0x12,R30
000224 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x5:
000225 77e0      	ANDI R30,LOW(0x70)
000226 2fae      	MOV  R26,R30
000227 b3e8      	IN   R30,0x18
000228 70ef      	ANDI R30,LOW(0xF)
000229 2bea      	OR   R30,R26
00022a bbe8      	OUT  0x18,R30
                +
00022b e180     +LDI R24 , LOW ( 10000 )
00022c e297     +LDI R25 , HIGH ( 10000 )
                +__DELAY_USW_LOOP :
00022d 9701     +SBIW R24 , 1
00022e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 10000
00022f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
000230 2da4      	MOV  R26,R4
000231 e0b0      	LDI  R27,0
000232 e0ea      	LDI  R30,LOW(10)
000233 e0f0      	LDI  R31,HIGH(10)
000234 d06b      	RCALL __DIVW21
000235 57e0      	SUBI R30,LOW(-_seg_pat*2)
000236 4fff      	SBCI R31,HIGH(-_seg_pat*2)
000237 91e4      	LPM  R30,Z
000238 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
000239 2da5      	MOV  R26,R5
00023a 27bb      	CLR  R27
00023b e0ea      	LDI  R30,LOW(10)
00023c e0f0      	LDI  R31,HIGH(10)
00023d d067      	RCALL __MODW21
00023e 57e0      	SUBI R30,LOW(-_seg_pat*2)
00023f 4fff      	SBCI R31,HIGH(-_seg_pat*2)
000240 91e4      	LPM  R30,Z
000241 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8:
000242 2da5      	MOV  R26,R5
000243 e0b0      	LDI  R27,0
000244 e0ea      	LDI  R30,LOW(10)
000245 e0f0      	LDI  R31,HIGH(10)
000246 d059      	RCALL __DIVW21
000247 57e0      	SUBI R30,LOW(-_seg_pat*2)
000248 4fff      	SBCI R31,HIGH(-_seg_pat*2)
000249 91e4      	LPM  R30,Z
00024a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x9:
00024b bbeb      	OUT  0x1B,R30
00024c b3eb      	IN   R30,0x1B
00024d 2fae      	MOV  R26,R30
00024e 2fe1      	MOV  R30,R17
00024f 7fe0      	ANDI R30,LOW(0xF0)
000250 2bea      	OR   R30,R26
000251 bbeb      	OUT  0x1B,R30
                +
000252 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
000253 958a     +DEC R24
000254 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
000255 9ada      	SBI  0x1B,2
                +
000256 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
000257 958a     +DEC R24
000258 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
000259 98da      	CBI  0x1B,2
00025a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xA:
00025b 920a      	ST   -Y,R0
00025c 921a      	ST   -Y,R1
00025d 92fa      	ST   -Y,R15
00025e 936a      	ST   -Y,R22
00025f 937a      	ST   -Y,R23
000260 938a      	ST   -Y,R24
000261 939a      	ST   -Y,R25
000262 93aa      	ST   -Y,R26
000263 93ba      	ST   -Y,R27
000264 93ea      	ST   -Y,R30
000265 93fa      	ST   -Y,R31
000266 b7ef      	IN   R30,SREG
000267 93ea      	ST   -Y,R30
000268 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __ANEGW1:
000269 95f1      	NEG  R31
00026a 95e1      	NEG  R30
00026b 40f0      	SBCI R31,0
00026c 9508      	RET
                 
                 __MULD12:
                 __MULD12U:
00026d 9f7a      	MUL  R23,R26
00026e 2d70      	MOV  R23,R0
00026f 9f6b      	MUL  R22,R27
000270 0d70      	ADD  R23,R0
000271 9ff8      	MUL  R31,R24
000272 0d70      	ADD  R23,R0
000273 9fe9      	MUL  R30,R25
000274 0d70      	ADD  R23,R0
000275 9f6a      	MUL  R22,R26
000276 2d60      	MOV  R22,R0
000277 0d71      	ADD  R23,R1
000278 9ffb      	MUL  R31,R27
000279 0d60      	ADD  R22,R0
00027a 1d71      	ADC  R23,R1
00027b 9fe8      	MUL  R30,R24
00027c 0d60      	ADD  R22,R0
00027d 1d71      	ADC  R23,R1
00027e 2788      	CLR  R24
00027f 9ffa      	MUL  R31,R26
000280 2df0      	MOV  R31,R0
000281 0d61      	ADD  R22,R1
000282 1f78      	ADC  R23,R24
000283 9feb      	MUL  R30,R27
000284 0df0      	ADD  R31,R0
000285 1d61      	ADC  R22,R1
000286 1f78      	ADC  R23,R24
000287 9fea      	MUL  R30,R26
000288 2de0      	MOV  R30,R0
000289 0df1      	ADD  R31,R1
00028a 1f68      	ADC  R22,R24
00028b 1f78      	ADC  R23,R24
00028c 9508      	RET
                 
                 __DIVW21U:
00028d 2400      	CLR  R0
00028e 2411      	CLR  R1
00028f e190      	LDI  R25,16
                 __DIVW21U1:
000290 0faa      	LSL  R26
000291 1fbb      	ROL  R27
000292 1c00      	ROL  R0
000293 1c11      	ROL  R1
000294 1a0e      	SUB  R0,R30
000295 0a1f      	SBC  R1,R31
000296 f418      	BRCC __DIVW21U2
000297 0e0e      	ADD  R0,R30
000298 1e1f      	ADC  R1,R31
000299 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00029a 60a1      	SBR  R26,1
                 __DIVW21U3:
00029b 959a      	DEC  R25
00029c f799      	BRNE __DIVW21U1
00029d 01fd      	MOVW R30,R26
00029e 01d0      	MOVW R26,R0
00029f 9508      	RET
                 
                 __DIVW21:
0002a0 d01c      	RCALL __CHKSIGNW
0002a1 dfeb      	RCALL __DIVW21U
0002a2 f40e      	BRTC __DIVW211
0002a3 dfc5      	RCALL __ANEGW1
                 __DIVW211:
0002a4 9508      	RET
                 
                 __MODW21:
0002a5 94e8      	CLT
0002a6 ffb7      	SBRS R27,7
0002a7 c004      	RJMP __MODW211
0002a8 95b1      	NEG  R27
0002a9 95a1      	NEG  R26
0002aa 40b0      	SBCI R27,0
0002ab 9468      	SET
                 __MODW211:
0002ac fdf7      	SBRC R31,7
0002ad dfbb      	RCALL __ANEGW1
0002ae dfde      	RCALL __DIVW21U
0002af 01fd      	MOVW R30,R26
0002b0 f40e      	BRTC __MODW212
0002b1 dfb7      	RCALL __ANEGW1
                 __MODW212:
0002b2 9508      	RET
                 
                 __MANDW12:
0002b3 94e8      	CLT
0002b4 fff7      	SBRS R31,7
0002b5 c002      	RJMP __MANDW121
0002b6 dfb2      	RCALL __ANEGW1
0002b7 9468      	SET
                 __MANDW121:
0002b8 23ea      	AND  R30,R26
0002b9 23fb      	AND  R31,R27
0002ba f40e      	BRTC __MANDW122
0002bb dfad      	RCALL __ANEGW1
                 __MANDW122:
0002bc 9508      	RET
                 
                 __CHKSIGNW:
0002bd 94e8      	CLT
0002be fff7      	SBRS R31,7
0002bf c002      	RJMP __CHKSW1
0002c0 dfa8      	RCALL __ANEGW1
0002c1 9468      	SET
                 __CHKSW1:
0002c2 ffb7      	SBRS R27,7
0002c3 c006      	RJMP __CHKSW2
0002c4 95b1      	NEG  R27
0002c5 95a1      	NEG  R26
0002c6 40b0      	SBCI R27,0
0002c7 f800      	BLD  R0,0
0002c8 9403      	INC  R0
0002c9 fa00      	BST  R0,0
                 __CHKSW2:
0002ca 9508      	RET
                 
                 _delay_ms:
0002cb 9610      	adiw r26,0
0002cc f039      	breq __delay_ms1
                 __delay_ms0:
0002cd 95a8      	wdr
                +
0002ce ea80     +LDI R24 , LOW ( 0xFA0 )
0002cf e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0002d0 9701     +SBIW R24 , 1
0002d1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0002d2 9711      	sbiw r26,1
0002d3 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002d4 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  24 r1 :  13 r2 :   9 r3 :   0 r4 :   7 r5 :   6 r6 :   4 r7 :   6 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  19 r17:  27 r18:   0 r19:   0 r20:   0 r21:   0 r22:  16 r23:  16 
r24:  30 r25:  10 r26:  67 r27:  33 r28:   3 r29:   1 r30: 146 r31:  40 
x  :   5 y  :  42 z  :  18 
Registers used: 23 out of 35 (65.7%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   9 add   :  11 
adiw  :   2 and   :   2 andi  :   8 asr   :   0 bclr  :   0 bld   :   7 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   3 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  14 brpl  :   0 brsh  :   2 brtc  :   3 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :   2 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   9 cls   :   0 clt   :   5 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   2 cpi   :   3 cpse  :   0 dec   :   8 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   6 inc   :   3 jmp   :  36 ld    :  21 ldd   :   0 
ldi   : 100 lds   :   5 lpm   :  21 lsl   :   1 lsr   :   0 mov   :  25 
movw  :  12 mul   :  10 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 
or    :   4 ori   :   0 out   :  23 pop   :   2 push  :   2 rcall :  77 
ret   :  28 reti  :   1 rjmp  :  29 rol   :   3 ror   :   0 sbc   :   1 
sbci  :  18 sbi   :   2 sbic  :   1 sbis  :   2 sbiw  :   8 sbr   :   1 
sbrc  :   2 sbrs  :   6 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   5 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  30 std   :   0 sts   :  12 sub   :   1 subi  :  13 
swap  :   2 tst   :   1 wdr   :   1 
Instructions used: 59 out of 117 (50.4%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005aa   1332    118   1450  131072   1.1%
[.dseg] 0x000100 0x000513      0     19     19    4096   0.5%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 8 warnings
